##########installing k8s in ubuntu(version 1.33)###########---------> follow offical documentation
-------------------------------------------------------------------------------
----------------------------------------------------------------------------------
this is to both worker node and master 

https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/

--->#turn off the swaf
sudo swapoff -a

---->#go to container run time
https://kubernetes.io/docs/setup/production-environment/container-runtimes/
#forwording ipv4
# sysctl params required by setup, params persist across reboots
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.ipv4.ip_forward = 1
EOF

# Apply sysctl params without reboot
sudo sysctl --system

#Verify that net.ipv4.ip_forward is set to 1 with:

sysctl net.ipv4.ip_forward

#install the containerd 
https://github.com/containerd/containerd/blob/main/docs/getting-started.md

go to ubuntu it will forword to docker documentation (https://docs.docker.com/engine/install/ubuntu/)

now install----

# Add Docker's official GPG key:
sudo apt-get update
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc

# Add the repository to Apt sources:
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update

sudo apt-get install containerd.io

--->#congigure cgroup
https://kubernetes.io/docs/setup/production-environment/container-runtimes/#containerd

containerd config default > /etc/containerd/config.toml

##To use the systemd cgroup driver in /etc/containerd/config.toml with runc, set

#[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
  ...
 # [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
    SystemdCgroup = true

#go to the file 
vi /etc/containerd/config.toml
SystemdCgroup = true

sudo systemctl restart containerd

#installing kubeadm,kubelet,kubectl

These instructions are for Kubernetes v1.33.

Update the apt package index and install packages needed to use the Kubernetes apt repository:

sudo apt-get update
# apt-transport-https may be a dummy package; if so, you can skip that package
sudo apt-get install -y apt-transport-https ca-certificates curl gpg

#Download the public signing key for the Kubernetes package repositories. The same signing key is used for all repositories so you can disregard the version in the URL:

# If the directory `/etc/apt/keyrings` does not exist, it should be created before the curl command, read the note below.
# sudo mkdir -p -m 755 /etc/apt/keyrings
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.33/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

Note:
In releases older than Debian 12 and Ubuntu 22.04, directory /etc/apt/keyrings does not exist by default, and it should be created before the curl command.
Add the appropriate Kubernetes apt repository. Please note that this repository have packages only for Kubernetes 1.33; for other Kubernetes minor versions, you need to change the Kubernetes minor version in the URL to match your desired minor version (you should also check that you are reading the documentation for the version of Kubernetes that you plan to install).

# This overwrites any existing configuration in /etc/apt/sources.list.d/kubernetes.list

echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.33/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list


#Update the apt package index, install kubelet, kubeadm and kubectl, and pin their version:

sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl

#(Optional) Enable the kubelet service before running kubeadm:

sudo systemctl enable --now kubelet


-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
operations need to done on master node

create a cluster with kubeadm
https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/

https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/

kubeadm init <args>

<args>
--apiserver-advertise-address <master privateip>

go to addon for networking
https://github.com/flannel-io/flannel#deploying-flannel-manually
--pod-network-cidr 10.244.0.0/16

--cri-socket unix:///var/run/containerd/containerd.sock


kubeadm init --apiserver-advertise-address <master privateip> --pod-network-cidr 10.244.0.0/16 --cri-socket unix:///var/run/containerd/containerd.sock

after initializing we will get kubeadm join <token> 

--------we will get this message------
 Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

You should now deploy a Pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  /docs/concepts/cluster-administration/addons/

You can now join any number of machines by running the following on each node
as root:

  kubeadm join <control-plane-host>:<control-plane-port> --token <token> --discovery-token-ca-cert-hash sha256:<hash>



----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
now go to worker nodes

paste the kubeadm token


 kubeadm join <control-plane-host>:<control-plane-port> --token <token> --discovery-token-ca-cert-hash sha256:<hash>

--------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------
on master node

now check 
---->kubectl get nodes
you can see nodes and master as well but they are in not ready state 
to get ready we need to install network plugins

go to 
https://github.com/rajch/weave#using-weave-on-kubernetes

#Using Weave Net on Kubernetes
On a newly created Kubernetes cluster, the Weave Net CNI pluging can be installed by running the following command:

     kubectl apply -f https://reweave.azurewebsites.net/k8s/v1.29/net.yaml
Replace v1.29 with the version on Kubernetes on your cluster.

as our version is 1.33 replace it with 1.33

now check 
kubectl get nodes

now nodes are in ready state

 
































kubeadm init --apiserver-advertise-address 172.31.33.255 --pod-network-cidr 10.244.0.0/16 --cri-socket unix:///var/run/containerd/containerd.sock
